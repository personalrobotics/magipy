from .base import Action, Solution, ExecutableSolution, ExecutionError
from abc import ABCMeta, abstractmethod

class Validator(object):
    """
    This class allows for validating the state
    of an environment before/after execution of an action.
    An instance of this class should be created and passed to 
    base.Validate().
    """

    def __init__(self, name='Validator'): 
        self._name = name 

    @abstractmethod
    def validate(self, env, detector=None):
        """
        @param env The OpenRAVE environment to validate
        @throws ValidationError if the environment is not valid
        """
        pass

    def __str__(self): 
        return self._name 


class SequenceValidator(Validator): 
    def __init__(self, validators, name='SequenceValidator'):
        """
        Validates validators in-order.
        @param validators: list of validators.
        """
        Validator.__init__(self, name)
        self.validators = validators 
    
    def validate(self, env, detector=None): 
        """
        @param env The OpenRAVE environment to validate
        @throws ValidationError if the environment is not valid
        """
        for validator in self.validators: 
            validator.validate(env, detector) 



class ValidateSolution(Solution, ExecutableSolution):
    def __init__(self, action, wrapped_solution, validator):
        """
        Meta-solution that allows validating an environment after action execution
        @param action The action that generated this Solution or ExecutableSolution
        @param wrapped_solution A Solution or ExecutableSolution that should be processed
        and executed prior to validation
        @param validator The Validator to use to validate the environment after execution
        """
        Solution.__init__(self, action, deterministic=wrapped_solution.deterministic)
        ExecutableSolution.__init__(self, self)
        self.wrapped_solution=wrapped_solution
        self.validator=validator

    def save(self, env):
        """
        @param env The OpenRAVE environment
        @return The result of a call to save on the wrapped solution
        """
        return self.wrapped_solution.save(env)

    def jump(self, env):
        """
        Calls jump on the wrapped solution
        @param env The OpenRAVE environment
        """
        self.wrapped_solution.jump(env)

    def postprocess(self, env):
        """
        Executes the postprocess command on the wrapped_solution
        and returns a ValidateSolution that wraps the ExecutableSolution
        generated by the postprocessing.
        @param env The OpenRAVE environment
        @return A ValidateSolution 
        """
        executable_solution = self.wrapped_solution.postprocess(env)
        return ValidateSolution(action=self.action, wrapped_solution=executable_solution,
                                validator=self.validator)

    def execute(self, env, simulate):
        """
        Executes the solution then validates the environment
        """
        self.wrapped_solution.execute(env, simulate)
        try:
            self.validator.validate(env)
        except ExecutionError as e: 
            raise ExecutionError(e, solution=self)

class ValidateAction(Action):

    def __init__(self, validator, wrapped_action, name=None):
        """
        Meta-action that allows an action to be validated after
        execution using the supplied validator.
        @param validator The Validator to validate the action with
        @param wrapped_action The action to be validated after execution
        @param name The name of this action
        """
        super(ValidateAction, self).__init__(name=name)
        self.action = wrapped_action
        self.validator = validator

    def get_name(self):
        """
        Overrides the get_name method on Action to return the name of the wrapped
        action if a name was not specified for this action
        @return The name of this action, if None specified, the name of the wrapped action
        """
        if self._name is not None:
            return self._name
        else:
            return self.action.get_name()

    def plan(self, env):
        """
        Plan the wrapped action
        @param env The OpenRAVE environment to plan in
        @return A ValidateSolution object
        """
        solution = self.action.plan(env)
        return ValidateSolution(action=self, wrapped_solution=solution, validator=self.validator)
